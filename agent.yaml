# =====================================================
# üß† agent.yaml ‚Äî Configuraci√≥n del Agente IA
# Proyecto: SL2000-Next
# Autor: BeLc3bU
# Descripci√≥n:
#   Archivo de configuraci√≥n para cualquier IA que
#   colabore en el desarrollo del sistema SL2000-Next.
# =====================================================

context: |
  SL2000-Next es una reconstrucci√≥n moderna del sistema SL2000
  utilizado por el Ej√©rcito del Aire y del Espacio (Espa√±a).
  Su objetivo es crear una plataforma full-stack modular para
  la gesti√≥n log√≠stica, mantenimiento, operaciones y recursos
  de aeronaves y veh√≠culos, con √©nfasis en seguridad, trazabilidad
  y automatizaci√≥n.

  El proyecto debe funcionar en entornos Docker, con backend en
  Node.js (Express), frontend en React (Vite), y base de datos
  PostgreSQL. El agente IA colaborar√° en la generaci√≥n, documentaci√≥n
  y optimizaci√≥n del c√≥digo, manteniendo coherencia entre m√≥dulos
  y promoviendo buenas pr√°cticas de ingenier√≠a.

objectives:
  - Dise√±ar y mantener una arquitectura escalable, limpia y segura.
  - Asegurar coherencia entre backend, frontend y base de datos.
  - Implementar autenticaci√≥n JWT con roles definidos.
  - Documentar autom√°ticamente rutas, controladores y modelos.
  - Automatizar tareas repetitivas sin comprometer seguridad.
  - Proponer mejoras de rendimiento y mantenibilidad.
  - Preservar la filosof√≠a operativa del sistema SL2000 original.

guidelines:
  - Seguir principios SOLID, DRY y KISS.
  - Validar y sanitizar todos los datos de entrada/salida.
  - Mantener el c√≥digo modular y comentado.
  - Evitar dependencias innecesarias.
  - Priorizar la seguridad y la estabilidad sobre la velocidad.
  - Explicar siempre el prop√≥sito del c√≥digo antes de generarlo.
  - No generar ni usar informaci√≥n sensible o clasificada.
  - Toda comunicaci√≥n debe ser t√©cnica, profesional y precisa.

stack:
  backend:
    - Node.js (Express)
    - PostgreSQL (Sequelize ORM)
    - JWT (Autenticaci√≥n)
    - Jest (Testing)
  frontend:
    - React + Vite
    - Axios (API requests)
    - Zustand o Redux (estado global)
    - TailwindCSS (UI)
  infra:
    - Docker + Docker Compose
    - GitHub Actions (CI/CD opcional)
    - ESLint + Prettier (estilo de c√≥digo)

roles:
  - Administrador: control total del sistema (CRUD completo)
  - T√©cnico: registro y actualizaci√≥n de mantenimiento
  - Operador: acceso a informes y operaciones limitadas
  - Invitado: lectura restringida de datos

output_format:
  - Todas las respuestas deben estructurarse as√≠:
    1. üß© **Resumen t√©cnico**
    2. üß† **Explicaci√≥n del enfoque**
    3. üíª **C√≥digo o comandos**
    4. üß™ **Ejemplo o validaci√≥n**
  - Escribir el c√≥digo en ingl√©s, los comentarios y explicaciones en espa√±ol.
  - Mantener un formato limpio y legible (Markdown + bloques de c√≥digo).
  - Si hay varias soluciones posibles, explicar ventajas y desventajas.

naming_conventions:
  files: "kebab-case"
  variables: "camelCase"
  components: "PascalCase"
  database_tables: "snake_case"

security:
  - Nunca incluir claves, tokens o datos reales.
  - No exponer configuraciones cr√≠ticas en el c√≥digo generado.
  - Todas las rutas y acciones deben tener validaci√≥n de permisos.
  - Cifrar contrase√±as con bcrypt o equivalente.
  - Usar HTTPS y CORS configurado correctamente.

collaboration:
  - Las IAs deben coordinar sus cambios respetando ramas y commits:
    - feature/<nombre_modulo>
    - fix/<nombre_bug>
  - Los mensajes de commit seguir√°n el formato Conventional Commits.
  - Se deben generar logs y documentaci√≥n autom√°tica de los endpoints.

license: MIT
version: 1.0.0
status: "Pre-Alpha"
